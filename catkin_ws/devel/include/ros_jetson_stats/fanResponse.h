// Generated by gencpp from file ros_jetson_stats/fanResponse.msg
// DO NOT EDIT!


#ifndef ROS_JETSON_STATS_MESSAGE_FANRESPONSE_H
#define ROS_JETSON_STATS_MESSAGE_FANRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_jetson_stats
{
template <class ContainerAllocator>
struct fanResponse_
{
  typedef fanResponse_<ContainerAllocator> Type;

  fanResponse_()
    : done()  {
    }
  fanResponse_(const ContainerAllocator& _alloc)
    : done(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _done_type;
  _done_type done;





  typedef boost::shared_ptr< ::ros_jetson_stats::fanResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_jetson_stats::fanResponse_<ContainerAllocator> const> ConstPtr;

}; // struct fanResponse_

typedef ::ros_jetson_stats::fanResponse_<std::allocator<void> > fanResponse;

typedef boost::shared_ptr< ::ros_jetson_stats::fanResponse > fanResponsePtr;
typedef boost::shared_ptr< ::ros_jetson_stats::fanResponse const> fanResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_jetson_stats::fanResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_jetson_stats::fanResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_jetson_stats::fanResponse_<ContainerAllocator1> & lhs, const ::ros_jetson_stats::fanResponse_<ContainerAllocator2> & rhs)
{
  return lhs.done == rhs.done;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_jetson_stats::fanResponse_<ContainerAllocator1> & lhs, const ::ros_jetson_stats::fanResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_jetson_stats

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_jetson_stats::fanResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_jetson_stats::fanResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_jetson_stats::fanResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_jetson_stats::fanResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_jetson_stats::fanResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_jetson_stats::fanResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_jetson_stats::fanResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f6f8833c91017f802acaa131839007d";
  }

  static const char* value(const ::ros_jetson_stats::fanResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f6f8833c91017f8ULL;
  static const uint64_t static_value2 = 0x02acaa131839007dULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_jetson_stats::fanResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_jetson_stats/fanResponse";
  }

  static const char* value(const ::ros_jetson_stats::fanResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_jetson_stats::fanResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string done\n"
;
  }

  static const char* value(const ::ros_jetson_stats::fanResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_jetson_stats::fanResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.done);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct fanResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_jetson_stats::fanResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_jetson_stats::fanResponse_<ContainerAllocator>& v)
  {
    s << indent << "done: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.done);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_JETSON_STATS_MESSAGE_FANRESPONSE_H
