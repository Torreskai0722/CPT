// Generated by gencpp from file ros_referee/ProcessStatus.msg
// DO NOT EDIT!


#ifndef ROS_REFEREE_MESSAGE_PROCESSSTATUS_H
#define ROS_REFEREE_MESSAGE_PROCESSSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ros_referee
{
template <class ContainerAllocator>
struct ProcessStatus_
{
  typedef ProcessStatus_<ContainerAllocator> Type;

  ProcessStatus_()
    : header()
    , pid(0)
    , ppid(0)
    , cpids()
    , scheduling_policy()
    , priority(0)
    , imgseq(0)
    , app()
    , runtime(0.0)
    , proposals(0)
    , objects(0)
    , probability()
    , data()  {
    }
  ProcessStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pid(0)
    , ppid(0)
    , cpids(_alloc)
    , scheduling_policy(_alloc)
    , priority(0)
    , imgseq(0)
    , app(_alloc)
    , runtime(0.0)
    , proposals(0)
    , objects(0)
    , probability(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _pid_type;
  _pid_type pid;

   typedef int64_t _ppid_type;
  _ppid_type ppid;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _cpids_type;
  _cpids_type cpids;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _scheduling_policy_type;
  _scheduling_policy_type scheduling_policy;

   typedef uint8_t _priority_type;
  _priority_type priority;

   typedef int64_t _imgseq_type;
  _imgseq_type imgseq;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _app_type;
  _app_type app;

   typedef double _runtime_type;
  _runtime_type runtime;

   typedef int64_t _proposals_type;
  _proposals_type proposals;

   typedef int64_t _objects_type;
  _objects_type objects;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _probability_type;
  _probability_type probability;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::ros_referee::ProcessStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_referee::ProcessStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ProcessStatus_

typedef ::ros_referee::ProcessStatus_<std::allocator<void> > ProcessStatus;

typedef boost::shared_ptr< ::ros_referee::ProcessStatus > ProcessStatusPtr;
typedef boost::shared_ptr< ::ros_referee::ProcessStatus const> ProcessStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_referee::ProcessStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_referee::ProcessStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_referee::ProcessStatus_<ContainerAllocator1> & lhs, const ::ros_referee::ProcessStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.pid == rhs.pid &&
    lhs.ppid == rhs.ppid &&
    lhs.cpids == rhs.cpids &&
    lhs.scheduling_policy == rhs.scheduling_policy &&
    lhs.priority == rhs.priority &&
    lhs.imgseq == rhs.imgseq &&
    lhs.app == rhs.app &&
    lhs.runtime == rhs.runtime &&
    lhs.proposals == rhs.proposals &&
    lhs.objects == rhs.objects &&
    lhs.probability == rhs.probability &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_referee::ProcessStatus_<ContainerAllocator1> & lhs, const ::ros_referee::ProcessStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_referee

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_referee::ProcessStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_referee::ProcessStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_referee::ProcessStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_referee::ProcessStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_referee::ProcessStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_referee::ProcessStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_referee::ProcessStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "60f0fccd1643b5091802875556e45e83";
  }

  static const char* value(const ::ros_referee::ProcessStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x60f0fccd1643b509ULL;
  static const uint64_t static_value2 = 0x1802875556e45e83ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_referee::ProcessStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_referee/ProcessStatus";
  }

  static const char* value(const ::ros_referee::ProcessStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_referee::ProcessStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int64 pid\n"
"int64 ppid\n"
"int64[] cpids\n"
"string scheduling_policy\n"
"uint8 priority\n"
"int64 imgseq\n"
"string app\n"
"float64 runtime\n"
"int64 proposals\n"
"int64 objects\n"
"float64[] probability\n"
"int64[] data\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ros_referee::ProcessStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_referee::ProcessStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pid);
      stream.next(m.ppid);
      stream.next(m.cpids);
      stream.next(m.scheduling_policy);
      stream.next(m.priority);
      stream.next(m.imgseq);
      stream.next(m.app);
      stream.next(m.runtime);
      stream.next(m.proposals);
      stream.next(m.objects);
      stream.next(m.probability);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProcessStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_referee::ProcessStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_referee::ProcessStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pid: ";
    Printer<int64_t>::stream(s, indent + "  ", v.pid);
    s << indent << "ppid: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ppid);
    s << indent << "cpids[]" << std::endl;
    for (size_t i = 0; i < v.cpids.size(); ++i)
    {
      s << indent << "  cpids[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.cpids[i]);
    }
    s << indent << "scheduling_policy: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.scheduling_policy);
    s << indent << "priority: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.priority);
    s << indent << "imgseq: ";
    Printer<int64_t>::stream(s, indent + "  ", v.imgseq);
    s << indent << "app: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.app);
    s << indent << "runtime: ";
    Printer<double>::stream(s, indent + "  ", v.runtime);
    s << indent << "proposals: ";
    Printer<int64_t>::stream(s, indent + "  ", v.proposals);
    s << indent << "objects: ";
    Printer<int64_t>::stream(s, indent + "  ", v.objects);
    s << indent << "probability[]" << std::endl;
    for (size_t i = 0; i < v.probability.size(); ++i)
    {
      s << indent << "  probability[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.probability[i]);
    }
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_REFEREE_MESSAGE_PROCESSSTATUS_H
